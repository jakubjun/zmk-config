/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 


        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp D &kp R &kp W &kp B 						&kp J &kp F  &kp U    &kp P   &kp SEMICOLON 
		&kp A &kp S &kp H &kp T &kp G 			        	        &kp Y &kp N &kp E &kp O &kp I
		&kp Z &kp X &kp M &kp C &kp V				        &kp K &kp L  &kp CMMA &kp DOT &kp SLASH
          				&mo 2 &mo 6  				&kp SPC &mo 1 
		>;
		};

       		left_layer {
		bindings = <
		&kp EXCL  &kp AT    &kp EQUAL    &kp DOLLAR    &kp PERCENT		&kp LG(LS(B)) &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp DOT 
		&kp LPAR    &kp ASTERISK    &kp CARET      &kp AMPS     &kp RPAR 		&kp LG(U) &kp NUM_4  &kp NUM_5 &kp NUM_6  &kp NUM_0 
		&kp LBKT    &kp RBKT 	&kp HASH &kp LBRC  &kp RBRC 	&kp CAPS &kp NUM_1 &kp NUM_2 &kp NUM_3  &kp KP_PLUS 
					    &mo 3  &kp LCTRL  					&none &none 
		>;
		};
		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN 
		&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
		&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
					  &mo 3 &kp LCTL  				&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp LC(C)  &kp LC(V)    &kp GRAVE    &kp BACKSLASH    &kp LG(LS(SPACE)) 			&kp UNDERSCORE &kp MINUS   &kp SQT   &kp DQT  &kp PIPE
		&kp ESC &kp LCTRL &kp LGUI &kp LSHIFT &kp LALT  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp PSCRN 
		&kp LG(SPACE)  &kp LG(M) &kp LG(N)  &kp LG(MINUS) &kp LG(LS(MINUS))   				&kp TAB &kp PG_DN  &kp PG_UP  &kp ENTER &kp TILDE   
					 &none &none  					&kp LSHIFT &mo 3
		>;
		};	


		fourth_layer {
		bindings = <
		&kp LG(Q)  &kp LG(V)    &kp LG(H)    &kp lg(F)    &none 			&none &none   &none   &none  &none
		&kp LG(R) &kp LG(W) &kp LG(S) &kp LG(E) &kp LG(G)  						&kp LG(J) &kp LG(K)  &kp LG(L) &kp LG(SEMICOLON) &kp LG(A) 
		&kp LG(LS(Q))  &kp LG(LS(R)) &kp LG(D)  &kp LG(RETURN) &none   				&none &none  &none  &none &none   
					 &mo 4 &mo 4  					&none &none
		>;
		};	


		sixth_layer {
		bindings = <
		&none  &none    &none    &none    &none 		  &none	&kp F7 &kp F8   &kp F9   &kp F10
		&none  &none    &none    &none    &none 		  &none	&kp F4 &kp F5   &kp F6   &kp F11
		&none  &none    &none    &none    &none 		  &none	&kp F1 &kp F2   &kp F3   &kp F12
					 &none &none  					&none &none
		>;
		};	


		seventh_layer {
		bindings = <
		&kt LC(BACKSPACE)  &none    &none    &none    &none 			&none &kp LG(NUM_7) &kp LG(NUM_8)   &kp LG(NUM_9)  &none
		&kt BACKSPACE  &none    &none    &none    &none 			&none &kp LG(NUM_4) &kp LG(NUM_5)   &kp LG(NUM_6)   &kp LG(NUM_0)
		&tog 6  &none  &none    &none    &none 			&none &kp LG(NUM_1) &kp LG(NUM_2)   &kp LG(NUM_3)  &none
					 &none &none  					&mo 5 &mo 7
		>;
		};	
        

		eight_layer {
		bindings = <
		&bt BT_CLR  &bt BT_NXT    &bt BT_PRV    &none    &none 			&none &none   &none   &none  &none
		&none  &none    &none    &none    &none 			&none &none   &none   &none  &none
		&none  &none    &none    &none    &none 			&none &none   &none   &none  &none
					 &mo 4 &mo 4  					&none &none
		>;
		};	
	};
};
